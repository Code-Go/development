/*
Deployment script for Attractions

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Attractions"
:setvar DefaultFilePrefix "Attractions"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[userTable_OrderAttraction]...';


GO
CREATE TYPE [dbo].[userTable_OrderAttraction] AS TABLE (
    [OrderNumber]               INT           IDENTITY (1, 1) NOT NULL,
    [SourceAttractionId]        INT           NULL,
    [DestinationAttractionId]   INT           NULL,
    [Distance]                  INT           NULL,
    [TravelTime]                INT           NULL,
    [TravelModeId]              INT           NULL,
    [SourceAttractionName]      VARCHAR (500) NULL,
    [DestinationAttractionName] VARCHAR (500) NULL,
    [DateAndTime]               DATETIME      NULL,
    [ReachTime]                 DATETIME      NULL,
    [TimeRequiredToView]        INT           NULL,
    [ViewTime]                  DATETIME      NULL);


GO
PRINT N'Creating [dbo].[userTable_OnlyId]...';


GO
CREATE TYPE [dbo].[userTable_OnlyId] AS TABLE (
    [ID] INT NULL);


GO
PRINT N'Creating [dbo].[userTable_Category]...';


GO
CREATE TYPE [dbo].[userTable_Category] AS TABLE (
    [CategoryID]   INT           NULL,
    [CategoryName] VARCHAR (250) NULL);


GO
PRINT N'Creating [dbo].[AttractionXMasterGoogleType]...';


GO
CREATE TABLE [dbo].[AttractionXMasterGoogleType] (
    [AttractionXMasterGoogleTypeID] INT IDENTITY (1, 1) NOT NULL,
    [AttractionId]                  INT NULL,
    [GoogleTypeId]                  INT NULL,
    CONSTRAINT [PK_AttractionXMasterGoogleType] PRIMARY KEY CLUSTERED ([AttractionXMasterGoogleTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[MasterGoogleType]...';


GO
CREATE TABLE [dbo].[MasterGoogleType] (
    [GoogleTypeID] INT           IDENTITY (1, 1) NOT NULL,
    [TypeName]     VARCHAR (500) NULL,
    CONSTRAINT [PK_MasterGoogleType] PRIMARY KEY CLUSTERED ([GoogleTypeID] ASC)
);


GO
PRINT N'Creating [dbo].[AttractionsNextAttractions]...';


GO
CREATE TABLE [dbo].[AttractionsNextAttractions] (
    [AttractionsNextAttractionsId] INT IDENTITY (1, 1) NOT NULL,
    [AttractionsId]                INT NULL,
    [NextAttractionsId]            INT NULL,
    CONSTRAINT [PK_AttractionsNextAttractions] PRIMARY KEY CLUSTERED ([AttractionsNextAttractionsId] ASC)
);


GO
PRINT N'Creating [dbo].[AttractionAverageTime]...';


GO
CREATE TABLE [dbo].[AttractionAverageTime] (
    [AttractionAverageTimeId] INT IDENTITY (1, 1) NOT NULL,
    [AttractionsId]           INT NULL,
    [AverageCost]             INT NULL,
    [AverageTime]             INT NULL,
    CONSTRAINT [PK_AttractionAverageTime] PRIMARY KEY CLUSTERED ([AttractionAverageTimeId] ASC)
);


GO
PRINT N'Creating [dbo].[AttractionsActiveStatus]...';


GO
CREATE TABLE [dbo].[AttractionsActiveStatus] (
    [AttractionsActiveStatusId] INT      IDENTITY (1, 1) NOT NULL,
    [AttractionsId]             INT      NULL,
    [OpenTime]                  TIME (7) NULL,
    [CloseTime]                 TIME (7) NULL,
    [MasterWeekId]              INT      NULL,
    CONSTRAINT [PK_AttractionsActiveStatus] PRIMARY KEY CLUSTERED ([AttractionsActiveStatusId] ASC)
);


GO
PRINT N'Creating [dbo].[MasterWeek]...';


GO
CREATE TABLE [dbo].[MasterWeek] (
    [MasterWeekId] INT          NOT NULL,
    [WeekName]     VARCHAR (50) NULL,
    CONSTRAINT [PK_MasterWeek] PRIMARY KEY CLUSTERED ([MasterWeekId] ASC)
);


GO
PRINT N'Creating [dbo].[MissingDistanceAttractionsRecordsXAttractions]...';


GO
CREATE TABLE [dbo].[MissingDistanceAttractionsRecordsXAttractions] (
    [MissingDistanceAttractionsRecordsXAttractionsID] INT           IDENTITY (1, 1) NOT NULL,
    [AttractionsID]                                   INT           NULL,
    [MissingDistanceAttractionsRecordsID]             INT           NULL,
    [IsTaken]                                         BIT           NULL,
    [IsResolved]                                      BIT           NULL,
    [CreatedDate]                                     DATETIME      NULL,
    [CreatedBy]                                       VARCHAR (250) NULL,
    [ModifiedDate]                                    DATETIME      NULL,
    [ModifedBy]                                       VARCHAR (250) NULL,
    CONSTRAINT [PK_MissingDistanceAttractionsRecordsXAttractions] PRIMARY KEY CLUSTERED ([MissingDistanceAttractionsRecordsXAttractionsID] ASC)
);


GO
PRINT N'Creating [dbo].[MasterRank]...';


GO
CREATE TABLE [dbo].[MasterRank] (
    [RankId]      INT           NOT NULL,
    [Description] VARCHAR (250) NULL,
    CONSTRAINT [PK_MasterRank] PRIMARY KEY CLUSTERED ([RankId] ASC)
);


GO
PRINT N'Creating [dbo].[MissingDistanceAttractionsRecords]...';


GO
CREATE TABLE [dbo].[MissingDistanceAttractionsRecords] (
    [MissingDistanceAttractionsRecordsID] INT           IDENTITY (1, 1) NOT NULL,
    [AttractionsID]                       INT           NULL,
    [MasterTravelModeID]                  INT           NULL,
    [CreatedDate]                         DATETIME      NULL,
    [CreatedBy]                           VARCHAR (250) NULL,
    [ModifiedDate]                        DATETIME      NULL,
    [ModifiedBy]                          VARCHAR (250) NULL,
    CONSTRAINT [PK_MissingDistanceAttractionsRecords] PRIMARY KEY CLUSTERED ([MissingDistanceAttractionsRecordsID] ASC)
);


GO
PRINT N'Creating [dbo].[AttractionTravelTimeDistance]...';


GO
CREATE TABLE [dbo].[AttractionTravelTimeDistance] (
    [AttractionTravelTimeDistanceId] INT IDENTITY (1, 1) NOT NULL,
    [SourceAttractionId]             INT NULL,
    [DestinationAttractionId]        INT NULL,
    [TravelModeId]                   INT NULL,
    [TravelTime]                     INT NULL,
    [Distance]                       INT NULL,
    CONSTRAINT [PK_AttractionTravelTimeDistance] PRIMARY KEY CLUSTERED ([AttractionTravelTimeDistanceId] ASC)
);


GO
PRINT N'Creating [dbo].[MasterCity]...';


GO
CREATE TABLE [dbo].[MasterCity] (
    [CityId]        INT           NOT NULL,
    [CityName]      VARCHAR (250) NULL,
    [CityShortName] VARCHAR (50)  NULL,
    [StateId]       INT           NULL,
    [IsDefault]     BIT           NULL,
    CONSTRAINT [PK_MasterCity] PRIMARY KEY CLUSTERED ([CityId] ASC)
);


GO
PRINT N'Creating [dbo].[Attractions]...';


GO
CREATE TABLE [dbo].[Attractions] (
    [AttractionsId]                    INT            IDENTITY (1, 1) NOT NULL,
    [AttractionName]                   VARCHAR (500)  NULL,
    [AddressOne]                       VARCHAR (500)  NULL,
    [AddressTwo]                       VARCHAR (500)  NULL,
    [CityId]                           INT            NULL,
    [CategoryId]                       INT            NULL,
    [Longitude]                        VARCHAR (250)  NULL,
    [Latitude]                         VARCHAR (250)  NULL,
    [PlaceId]                          VARCHAR (250)  NULL,
    [RankId]                           INT            NULL,
    [CreatedDate]                      DATETIME       NULL,
    [CreatedBy]                        VARCHAR (250)  NULL,
    [ModifiedDate]                     DATETIME       NULL,
    [ModifiedBy]                       VARCHAR (250)  NULL,
    [GoogleSearchText]                 VARCHAR (500)  NULL,
    [GoogleWebSite]                    VARCHAR (500)  NULL,
    [GoogleICon]                       VARCHAR (500)  NULL,
    [GoogleInternational_phone_number] VARCHAR (500)  NULL,
    [Googleadr_address]                VARCHAR (2000) NULL,
    [GoogleName]                       VARCHAR (500)  NULL,
    [GoogleRating]                     VARCHAR (50)   NULL,
    [GoogleUser_ratings_total]         INT            NULL,
    CONSTRAINT [PK_Attractions] PRIMARY KEY CLUSTERED ([AttractionsId] ASC)
);


GO
PRINT N'Creating [dbo].[CityStartPoint]...';


GO
CREATE TABLE [dbo].[CityStartPoint] (
    [CityStartPointId] INT IDENTITY (1, 1) NOT NULL,
    [CityId]           INT NULL,
    [AttractionId]     INT NULL,
    CONSTRAINT [PK_CityStartPoint] PRIMARY KEY CLUSTERED ([CityStartPointId] ASC)
);


GO
PRINT N'Creating [dbo].[MasterState]...';


GO
CREATE TABLE [dbo].[MasterState] (
    [StateId]        INT           NOT NULL,
    [StateName]      VARCHAR (250) NULL,
    [CountryId]      INT           NULL,
    [StateShortName] VARCHAR (50)  NULL,
    [IsDefault]      BIT           NULL,
    CONSTRAINT [PK_MasterState] PRIMARY KEY CLUSTERED ([StateId] ASC)
);


GO
PRINT N'Creating [dbo].[MasterCountry]...';


GO
CREATE TABLE [dbo].[MasterCountry] (
    [CountryId]        INT           NOT NULL,
    [CountryName]      VARCHAR (250) NULL,
    [CountryShortName] VARCHAR (50)  NULL,
    [CreatedBy]        VARCHAR (50)  NULL,
    [CreatedDate]      DATETIME      NULL,
    [ModifiedBy]       VARCHAR (50)  NULL,
    [ModifiedDate]     DATETIME      NULL,
    [IsDefault]        BIT           NULL,
    CONSTRAINT [PK_MaterCountry] PRIMARY KEY CLUSTERED ([CountryId] ASC)
);


GO
PRINT N'Creating [dbo].[MasterCategory]...';


GO
CREATE TABLE [dbo].[MasterCategory] (
    [CategoryId]   INT           NOT NULL,
    [CategoryName] VARCHAR (250) NULL,
    CONSTRAINT [PK_MasterCategory] PRIMARY KEY CLUSTERED ([CategoryId] ASC)
);


GO
PRINT N'Creating [dbo].[MasterTravelMode]...';


GO
CREATE TABLE [dbo].[MasterTravelMode] (
    [TravelModeId] INT           NOT NULL,
    [TravelType]   VARCHAR (500) NULL,
    CONSTRAINT [PK_MasterTravelMode] PRIMARY KEY CLUSTERED ([TravelModeId] ASC)
);


GO
PRINT N'Creating [dbo].[AdminUser]...';


GO
CREATE TABLE [dbo].[AdminUser] (
    [AdminUserId]  INT           IDENTITY (1, 1) NOT NULL,
    [UserName]     VARCHAR (250) NULL,
    [Password]     VARCHAR (250) NULL,
    [CredatedDate] DATETIME      NULL,
    [CreatedBy]    VARCHAR (250) NULL,
    [ModifiedDate] DATETIME      NULL,
    [ModifiedBy]   VARCHAR (250) NULL,
    CONSTRAINT [PK_AdminUser] PRIMARY KEY CLUSTERED ([AdminUserId] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[FK_AttractionXMasterGoogleType_Attractions]...';


GO
ALTER TABLE [dbo].[AttractionXMasterGoogleType]
    ADD CONSTRAINT [FK_AttractionXMasterGoogleType_Attractions] FOREIGN KEY ([AttractionId]) REFERENCES [dbo].[Attractions] ([AttractionsId]);


GO
PRINT N'Creating [dbo].[FK_AttractionXMasterGoogleType_MasterGoogleType]...';


GO
ALTER TABLE [dbo].[AttractionXMasterGoogleType]
    ADD CONSTRAINT [FK_AttractionXMasterGoogleType_MasterGoogleType] FOREIGN KEY ([GoogleTypeId]) REFERENCES [dbo].[MasterGoogleType] ([GoogleTypeID]);


GO
PRINT N'Creating [dbo].[FK_AttractionsNextAttractions_Attractions]...';


GO
ALTER TABLE [dbo].[AttractionsNextAttractions]
    ADD CONSTRAINT [FK_AttractionsNextAttractions_Attractions] FOREIGN KEY ([AttractionsId]) REFERENCES [dbo].[Attractions] ([AttractionsId]);


GO
PRINT N'Creating [dbo].[FK_AttractionsNextAttractions_Attractions1]...';


GO
ALTER TABLE [dbo].[AttractionsNextAttractions]
    ADD CONSTRAINT [FK_AttractionsNextAttractions_Attractions1] FOREIGN KEY ([NextAttractionsId]) REFERENCES [dbo].[Attractions] ([AttractionsId]);


GO
PRINT N'Creating [dbo].[FK_AttractionAverageTime_Attractions]...';


GO
ALTER TABLE [dbo].[AttractionAverageTime]
    ADD CONSTRAINT [FK_AttractionAverageTime_Attractions] FOREIGN KEY ([AttractionsId]) REFERENCES [dbo].[Attractions] ([AttractionsId]);


GO
PRINT N'Creating [dbo].[FK_AttractionsActiveStatus_Attractions]...';


GO
ALTER TABLE [dbo].[AttractionsActiveStatus]
    ADD CONSTRAINT [FK_AttractionsActiveStatus_Attractions] FOREIGN KEY ([AttractionsId]) REFERENCES [dbo].[Attractions] ([AttractionsId]);


GO
PRINT N'Creating [dbo].[FK_AttractionsActiveStatus_MasterWeek]...';


GO
ALTER TABLE [dbo].[AttractionsActiveStatus]
    ADD CONSTRAINT [FK_AttractionsActiveStatus_MasterWeek] FOREIGN KEY ([MasterWeekId]) REFERENCES [dbo].[MasterWeek] ([MasterWeekId]);


GO
PRINT N'Creating [dbo].[FK_MissingDistanceAttractionsRecordsXAttractions_MissingDistanceAttractionsRecords]...';


GO
ALTER TABLE [dbo].[MissingDistanceAttractionsRecordsXAttractions]
    ADD CONSTRAINT [FK_MissingDistanceAttractionsRecordsXAttractions_MissingDistanceAttractionsRecords] FOREIGN KEY ([MissingDistanceAttractionsRecordsID]) REFERENCES [dbo].[MissingDistanceAttractionsRecords] ([MissingDistanceAttractionsRecordsID]);


GO
PRINT N'Creating [dbo].[FK_MissingDistanceAttractionsRecords_Attractions]...';


GO
ALTER TABLE [dbo].[MissingDistanceAttractionsRecords]
    ADD CONSTRAINT [FK_MissingDistanceAttractionsRecords_Attractions] FOREIGN KEY ([AttractionsID]) REFERENCES [dbo].[Attractions] ([AttractionsId]);


GO
PRINT N'Creating [dbo].[FK_MissingDistanceAttractionsRecords_MasterTravelMode]...';


GO
ALTER TABLE [dbo].[MissingDistanceAttractionsRecords]
    ADD CONSTRAINT [FK_MissingDistanceAttractionsRecords_MasterTravelMode] FOREIGN KEY ([MasterTravelModeID]) REFERENCES [dbo].[MasterTravelMode] ([TravelModeId]);


GO
PRINT N'Creating [dbo].[FK_AttractionTravelTimeDistance_Attractions]...';


GO
ALTER TABLE [dbo].[AttractionTravelTimeDistance]
    ADD CONSTRAINT [FK_AttractionTravelTimeDistance_Attractions] FOREIGN KEY ([SourceAttractionId]) REFERENCES [dbo].[Attractions] ([AttractionsId]);


GO
PRINT N'Creating [dbo].[FK_AttractionTravelTimeDistance_Attractions1]...';


GO
ALTER TABLE [dbo].[AttractionTravelTimeDistance]
    ADD CONSTRAINT [FK_AttractionTravelTimeDistance_Attractions1] FOREIGN KEY ([DestinationAttractionId]) REFERENCES [dbo].[Attractions] ([AttractionsId]);


GO
PRINT N'Creating [dbo].[FK_AttractionTravelTimeDistance_MasterTravelMode]...';


GO
ALTER TABLE [dbo].[AttractionTravelTimeDistance]
    ADD CONSTRAINT [FK_AttractionTravelTimeDistance_MasterTravelMode] FOREIGN KEY ([TravelModeId]) REFERENCES [dbo].[MasterTravelMode] ([TravelModeId]);


GO
PRINT N'Creating [dbo].[FK_MasterCity_MasterState]...';


GO
ALTER TABLE [dbo].[MasterCity]
    ADD CONSTRAINT [FK_MasterCity_MasterState] FOREIGN KEY ([StateId]) REFERENCES [dbo].[MasterState] ([StateId]);


GO
PRINT N'Creating [dbo].[FK_Attractions_MasterCity]...';


GO
ALTER TABLE [dbo].[Attractions]
    ADD CONSTRAINT [FK_Attractions_MasterCity] FOREIGN KEY ([CityId]) REFERENCES [dbo].[MasterCity] ([CityId]);


GO
PRINT N'Creating [dbo].[FK_Attractions_MasterRank]...';


GO
ALTER TABLE [dbo].[Attractions]
    ADD CONSTRAINT [FK_Attractions_MasterRank] FOREIGN KEY ([RankId]) REFERENCES [dbo].[MasterRank] ([RankId]);


GO
PRINT N'Creating [dbo].[FK_CityStartPoint_Attractions]...';


GO
ALTER TABLE [dbo].[CityStartPoint]
    ADD CONSTRAINT [FK_CityStartPoint_Attractions] FOREIGN KEY ([AttractionId]) REFERENCES [dbo].[Attractions] ([AttractionsId]);


GO
PRINT N'Creating [dbo].[FK_CityStartPoint_MasterCity]...';


GO
ALTER TABLE [dbo].[CityStartPoint]
    ADD CONSTRAINT [FK_CityStartPoint_MasterCity] FOREIGN KEY ([CityId]) REFERENCES [dbo].[MasterCity] ([CityId]);


GO
PRINT N'Creating [dbo].[FK_MasterState_MaterCountry]...';


GO
ALTER TABLE [dbo].[MasterState]
    ADD CONSTRAINT [FK_MasterState_MaterCountry] FOREIGN KEY ([CountryId]) REFERENCES [dbo].[MasterCountry] ([CountryId]);


GO
PRINT N'Creating [dbo].[Public_GetCategory]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE Public_GetCategory
	
AS
BEGIN
	



SELECT [CategoryId]
      ,[CategoryName]
  FROM [dbo].[MasterCategory]





END
GO
PRINT N'Creating [dbo].[public_GetCityList]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE public_GetCityList
	
AS
BEGIN

SELECT [CityId]
      ,[CityName]
      ,[CityShortName]
      ,[StateId]
  FROM [dbo].[MasterCity]



END
GO
PRINT N'Creating [dbo].[Admin_AddMissingDistanceRecords]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[Admin_AddMissingDistanceRecords]
(
	@SourceAttractionID INT,
	@DestinationAttractions userTable_OnlyId ReadOnly,
	@TravelModeId INT 
)
AS
BEGIN

	DECLARE @MissingDistanceAttractionsRecordsID AS INT = 0

	SELECT @MissingDistanceAttractionsRecordsID = MissingDistanceAttractionsRecordsID 
		FROM [MissingDistanceAttractionsRecords] 
		WHERE AttractionsID = @SourceAttractionID AND MasterTravelModeID = @TravelModeId

	
	IF	(@MissingDistanceAttractionsRecordsID  < 1)
	BEGIN	

		INSERT INTO [dbo].[MissingDistanceAttractionsRecords]
				   ([AttractionsID]
				   ,[MasterTravelModeID]
				   ,[CreatedDate]
				   ,[CreatedBy]
				   )
		VALUES
			(@SourceAttractionID
			,@TravelModeId
			,getdate()
			,'User Checking'
			)
		
		SET @MissingDistanceAttractionsRecordsID = @@IDENTITY

	END


	INSERT INTO [dbo].[MissingDistanceAttractionsRecordsXAttractions]
			   ([AttractionsID]
			   ,[MissingDistanceAttractionsRecordsID]
			   ,[IsTaken]
			   ,[IsResolved]
			   ,[CreatedDate]
			   ,[CreatedBy]
			   )
	SELECT 
		 ID
		,@MissingDistanceAttractionsRecordsID
		,0
		,0
		,getdate()
		,'User Checking'		
	FROM @DestinationAttractions
	WHERE ID NOT IN 
				(
					SELECT AttractionsID 
					FROM MissingDistanceAttractionsRecordsXAttractions
					WHERE MissingDistanceAttractionsRecordsID = @MissingDistanceAttractionsRecordsID
				)	
END
GO
PRINT N'Creating [dbo].[GetNextNearestLocation]...';


GO
-- =============================================
-- Get the next attraction location information
-- =============================================
CREATE PROCEDURE [dbo].[GetNextNearestLocation]
	@TravelModeId INT
	,@SourceAttractionID INT
	,@DestinationAttractionID INT
	,@DestinationAttractions userTable_OnlyId ReadOnly
	,@OrderAttraction AS userTable_OrderAttraction ReadOnly
	,@StartDateAndTime DATETIME = NULL
	
AS
BEGIN

DECLARE @DefaultVisitTime INT = 2
	
	SELECT 		
		S.SourceAttractionId
		,S.DestinationAttractionId
		,S.Distance
		,S.TravelTime
		,S.TravelModeId
		,ATS.AttractionName AS 'SourceAttractionName'
		,ATD.AttractionName As 'DestinationAttractionName'
		,@StartDateAndTime AS 'DateAndTime'
		,DateADD(ss,S.TravelTime,@StartDateAndTime) AS 'ReachTime'
		,CASE WHEN 
				(SELECT COUNT(1) FROM AttractionAverageTime 
			WHERE AttractionsId = S.DestinationAttractionId) = 0
			THEN 
			 @DefaultVisitTime
			 ELSE
			 (SELECT TOP 1 AverageTime FROM AttractionAverageTime 
				WHERE AttractionsId = S.DestinationAttractionId)
			 END			
			AS 'TimeRequiredToView'
		,CASE WHEN 
				(SELECT COUNT(1) FROM AttractionAverageTime 
			WHERE AttractionsId = S.DestinationAttractionId) = 0
			THEN 
				CAST(DateADD(hh,@DefaultVisitTime,DateADD(ss,S.TravelTime,@StartDateAndTime)) AS DATETIME)
			ELSE				
				CAST( DateADD(hh,(SELECT TOP 1 AverageTime FROM AttractionAverageTime 
				WHERE AttractionsId = S.DestinationAttractionId),@StartDateAndTime) AS DATETIME)
			END 
			AS  'ViewTime'	
	FROM 
	(
		select *,
		row_number() over (PARTITION BY SourceAttractionId order by Distance asc )RN
		from AttractionTravelTimeDistance 
		WHERE TravelModeId = @TravelModeId
		AND SourceAttractionId = @SourceAttractionID
		AND DestinationAttractionId IN (SELECT ID FROM @DestinationAttractions)
		--AND DestinationAttractionId NOT IN (SELECT DestinationAttractionId FROM @OrderAttraction)
		--AND DestinationAttractionId <> @DestinationAttractionID
		--AND DestinationAttractionId NOT IN (SELECT SourceAttractionId FROM @OrderAttraction)
	)S
	JOIN Attractions ATS ON ATS.AttractionsId = S.SourceAttractionId
	JOIN Attractions ATD ON ATD.AttractionsId = S.DestinationAttractionId
	WHERE RN =1 	
END
GO
PRINT N'Creating [dbo].[Admin_MasterStateCheckExists]...';


GO
CREATE PROCEDURE Admin_MasterStateCheckExists 
(
	@StateId int
	,@StateName varchar(250)
)	
AS
BEGIN
	IF(@StateId = 0)
	BEGIN
		SELECT MS.[StateId]
		  ,MS.[StateName]
		  ,MS.[CountryId]
		  ,MS.[StateShortName]
		  ,MC.CountryName 
		FROM [dbo].[MasterState] MS
		JOIN dbo.MasterCountry MC ON MC.CountryId = MS.CountryId 
		WHERE MS.StateName = @StateName
		
	END
	ELSE
	BEGIN
		SELECT MS.[StateId]
		  ,MS.[StateName]
		  ,MS.[CountryId]
		  ,MS.[StateShortName]
		  ,MC.CountryName 
		FROM [dbo].[MasterState] MS
		JOIN dbo.MasterCountry MC ON MC.CountryId = MS.CountryId 
		WHERE MS.StateId NOT IN (@StateId)
		AND MS.StateName = @StateName		
	END
END
GO
PRINT N'Creating [dbo].[Admin_GetCountryOnId]...';


GO
CREATE PROCEDURE [dbo].[Admin_GetCountryOnId]
(
	@CountryId INT
)
AS
BEGIN
	

	SELECT [CountryId]
      ,[CountryName]
      ,[CountryShortName]
      ,[CreatedBy]
      ,[CreatedDate]
      ,[ModifiedBy]
      ,[ModifiedDate]
	  ,[IsDefault]
	FROM [dbo].[MasterCountry]
	WHERE CountryId = @CountryId


END
GO
PRINT N'Creating [dbo].[Admin_CheckCountryExist]...';


GO
CREATE PROCEDURE [dbo].[Admin_CheckCountryExist] 
	@CountryName Varchar(250)
	,@CountryId INT
AS
BEGIN	

	IF(@CountryId = 0)
	BEGIN	

		SELECT [CountryId]
		  ,[CountryName]
		  ,[CountryShortName]
		  ,[CreatedBy]
		  ,[CreatedDate]
		  ,[ModifiedBy]
		  ,[ModifiedDate]
		  ,[IsDefault]
		FROM [dbo].[MasterCountry]
		WHERE CountryName = @CountryName

	END
	ELSE
	BEGIN
		

		SELECT [CountryId]
		  ,[CountryName]
		  ,[CountryShortName]
		  ,[CreatedBy]
		  ,[CreatedDate]
		  ,[ModifiedBy]
		  ,[ModifiedDate]
		  ,[IsDefault]
		FROM [dbo].[MasterCountry]
		WHERE CountryName = @CountryName
		AND CountryId NOT IN (@CountryId)
	END
END
GO
PRINT N'Creating [dbo].[Admin_GetCountry]...';


GO
CREATE PROCEDURE [dbo].[Admin_GetCountry] 
AS
BEGIN
	SELECT [CountryId]
			,[CountryName]
			,[CountryShortName]
			,[CreatedBy]
			,[CreatedDate]
			,[ModifiedBy]
			,[ModifiedDate]
			,[IsDefault]
	FROM [dbo].[MasterCountry]
END
GO
PRINT N'Creating [dbo].[Admin_UpdateCountry]...';


GO
CREATE PROCEDURE [dbo].[Admin_UpdateCountry] 
(
	@CountryId INT
	,@CountryName Varchar(250)
	,@CountryShortName Varchar(50)	
	,@CreatedBy Varchar(50)
	,@IsDefault BIT
)
AS
BEGIN
	IF(@CountryId = 0)
	BEGIN		
		
		INSERT INTO [dbo].[MasterCountry]
			   ([CountryId]
			   ,[CountryName]
			   ,[CountryShortName]
			   ,[CreatedBy]
			   ,[CreatedDate]
			   ,[IsDefault] 
			   )
		 VALUES
			   ((SELECT ISNULL(Max(CountryId),0)+1 FROM MasterCountry)
			   ,@CountryName
			   ,@CountryShortName
			   ,@CreatedBy
			   ,GETDATE()
			   ,@IsDefault 
			   )
	END
	ELSE
	BEGIN		

		UPDATE [dbo].[MasterCountry]
		   SET [CountryName] = @CountryName
			  ,[CountryShortName] = @CountryShortName			  
			  ,[ModifiedBy] = @CreatedBy
			  ,[ModifiedDate] = GETDATE()
			  ,[IsDefault] = @IsDefault 
		 WHERE [CountryId] = @CountryId

		 IF(@IsDefault = 1)
		 BEGIN
			UPDATE [dbo].[MasterCountry]
			   SET [IsDefault] = 0
			 WHERE [CountryId] NOT IN (@CountryId)
		 END

	END
END
GO
PRINT N'Creating [dbo].[Admin_GetUserOnId]...';


GO
CREATE PROCEDURE Admin_GetUserOnId
(
	@AdminUserId INT
)
AS
BEGIN
	

SELECT [AdminUserId]
      ,[UserName]
      ,[Password]
      ,[CredatedDate]
      ,[CreatedBy]
      ,[ModifiedDate]
      ,[ModifiedBy]
  FROM [dbo].[AdminUser]
  WHERE AdminUserId = @AdminUserId




END
GO
PRINT N'Creating [dbo].[Admin_UpdateUser]...';


GO
CREATE PROCEDURE Admin_UpdateUser 
	@UserName Varchar(250)
	,@Password Varchar(250)
	,@CreatedBy Varchar(250)	
	,@AdminUserId INT
AS
BEGIN
	IF(@AdminUserId = 0)
	BEGIN
		INSERT INTO [dbo].[AdminUser]
			   ([UserName]
			   ,[Password]
			   ,[CredatedDate]
			   ,[CreatedBy]
			   )
		 VALUES
			   (@UserName
			   ,@Password
			   ,getdate()
			   ,@CreatedBy
			   )
	END
	ELSE
	BEGIN

		UPDATE [dbo].[AdminUser]
		SET [UserName] = @UserName
		  ,[Password] = @Password      
		  ,[ModifiedDate] = getdate()
		  ,[ModifiedBy] = @CreatedBy
		WHERE AdminUserId = @AdminUserId 

	END
END
GO
PRINT N'Creating [dbo].[Admin_CheckUserExist]...';


GO
CREATE PROCEDURE Admin_CheckUserExist 
	@UserName Varchar(250)
	,@AdminUserId INT
AS
BEGIN	

	IF(@AdminUserId = 0)
	BEGIN
		SELECT [AdminUserId]
		  ,[UserName]
		  ,[Password]
		  ,[CredatedDate]
		  ,[CreatedBy]
		  ,[ModifiedDate]
		  ,[ModifiedBy]
		FROM [dbo].[AdminUser]
		WHERE UserName = @UserName
	END
	ELSE
	BEGIN
		SELECT [AdminUserId]
		  ,[UserName]
		  ,[Password]
		  ,[CredatedDate]
		  ,[CreatedBy]
		  ,[ModifiedDate]
		  ,[ModifiedBy]
		FROM [dbo].[AdminUser]
		WHERE UserName = @UserName
		AND AdminUserId NOT IN (@AdminUserId)
	END
END
GO
PRINT N'Creating [dbo].[Admin_GetUser]...';


GO
CREATE PROCEDURE [dbo].[Admin_GetUser] 
AS
BEGIN
	

	SELECT [AdminUserId]
		  ,[UserName]
		  ,[Password]
		  ,[CredatedDate]
		  ,[CreatedBy]
		  ,[ModifiedDate]
		  ,[ModifiedBy]
	  FROM [dbo].[AdminUser]
END
GO
PRINT N'Creating [dbo].[Admin_CheckUser]...';


GO
CREATE PROCEDURE Admin_CheckUser 
(
	@UserName Varchar(250),
	@Password Varchar(250)
)
AS
BEGIN
	

	SELECT [AdminUserId]
		  ,[UserName]
		  ,[Password]
		  ,[CredatedDate]
		  ,[CreatedBy]
		  ,[ModifiedDate]
		  ,[ModifiedBy]
	  FROM [dbo].[AdminUser]
	  WHERE UserName = @UserName
	  AND [Password] = @Password


END
GO
PRINT N'Creating [dbo].[public_FilterAttractions]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[public_FilterAttractions]
	@EnterLocationName Varchar(250),
	@CategoryID userTable_Category ReadOnly 
AS
BEGIN


SELECT [AttractionsId]
      ,[AttractionName]
      ,[AddressOne]
      ,[AddressTwo]
      ,[CityId]
      ,[CategoryId]
      ,[Longitude]
      ,[Latitude]
      ,[PlaceId]
      ,[RankId]
      ,[CreatedDate]
      ,[CreatedBy]
      ,[ModifiedDate]
      ,[ModifiedBy]
	  ,GoogleSearchText
  FROM [dbo].[Attractions]
  WHERE CategoryId NOT IN (SELECT CategoryID FROM @CategoryID)
  AND GoogleSearchText IS NOT NULL

END
GO
PRINT N'Creating [dbo].[GetAttractionOpenTime]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE GetAttractionOpenTime
	@AttractionID INT
AS
BEGIN
	SELECT 
	AA.AttractionsId
	,MW.WeekName
	,AA.OpenTime
	,AA.CloseTime 
	FROM AttractionsActiveStatus AA
	JOIN MasterWeek MW ON MW.MasterWeekId = AA.MasterWeekId
	WHERE AA.AttractionsId = @AttractionID
END
GO
PRINT N'Creating [dbo].[Admin_InsertCountry]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE Admin_InsertCountry
(
	@CountryName Varchar(50)
	,@CountryShortName Varchar(50)
)
AS
BEGIN


INSERT INTO [dbo].[MasterCountry]
           ([CountryId]
		   ,[CountryName]
           ,[CountryShortName])
     VALUES
           ((SELECT ISNULL(Max(CountryId),1) FROM MasterCountry)
		   ,@CountryName
           ,@CountryShortName)

END
GO
PRINT N'Creating [dbo].[Admin_GetCountryList]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE Admin_GetCountryList 
	
AS
BEGIN

SELECT [CountryId]
      ,[CountryName]
      ,[CountryShortName]
  FROM [dbo].[MasterCountry]
END
GO
PRINT N'Creating [dbo].[Admin_MasterStateUpdate]...';


GO
CREATE PROCEDURE Admin_MasterStateUpdate 
(
	@StateId int
	,@StateName varchar(250)
    ,@CountryId int
    ,@StateShortName varchar(50)
	,@IsDefault Bit
)	
AS
BEGIN
	IF((SELECT 1 FROM MasterState WHERE StateId = @StateId) = 1)
	BEGIN	

		UPDATE [dbo].[MasterState]
		   SET [StateName] = @StateName
			  ,[CountryId] = @CountryId
			  ,[StateShortName] = @StateShortName
			  ,[IsDefault] = @IsDefault
		 WHERE StateId = @StateId

		 
	END
	ELSE
	BEGIN

		INSERT INTO [dbo].[MasterState]
			   ([StateId]
			   ,[StateName]
			   ,[CountryId]
			   ,[StateShortName]
			   ,[IsDefault])
		 VALUES
			   ((SELECT ISNULL(MAX(StateId),0) + 1 FROM MasterState)
			   ,@StateName
			   ,@CountryId
			   ,@StateShortName
			   ,@IsDefault)

	END

	IF(@IsDefault = 1)
	BEGIN
		UPDATE [dbo].[MasterState]
			SET [IsDefault] = 0
		WHERE StateId NOT IN (@StateId)
	END

END
GO
PRINT N'Creating [dbo].[Admin_MasterStateGetOnCountryId]...';


GO
CREATE PROCEDURE Admin_MasterStateGetOnCountryId
(
	@CountryId INT
)	
AS
BEGIN
	SELECT MS.[StateId]
      ,MS.[StateName]
      ,MS.[CountryId]
      ,MS.[StateShortName]
	  ,MC.CountryName 
	  ,MS.IsDefault
	FROM [dbo].[MasterState] MS
	JOIN dbo.MasterCountry MC ON MC.CountryId = MS.CountryId 
END
GO
PRINT N'Creating [dbo].[Admin_MasterStateGet]...';


GO
CREATE PROCEDURE Admin_MasterStateGet
	
AS
BEGIN
	SELECT MS.[StateId]
      ,MS.[StateName]
      ,MS.[CountryId]
      ,MS.[StateShortName]
	  ,MC.CountryName 
	  ,MS.IsDefault
	FROM [dbo].[MasterState] MS
	JOIN dbo.MasterCountry MC ON MC.CountryId = MS.CountryId 
END
GO
PRINT N'Creating [dbo].[Admin_MasterStateGetOnStateId]...';


GO
CREATE PROCEDURE Admin_MasterStateGetOnStateId 
(
	@StateId INT
)	
AS
BEGIN
	SELECT MS.[StateId]
      ,MS.[StateName]
      ,MS.[CountryId]
      ,MS.[StateShortName]
	  ,MC.CountryName 
	  ,MS.IsDefault
	FROM [dbo].[MasterState] MS
	JOIN dbo.MasterCountry MC ON MC.CountryId = MS.CountryId 
	WHERE MS.StateId = @StateId
END
GO
PRINT N'Creating [dbo].[Admin_MasterCityCheckExists]...';


GO
CREATE PROCEDURE [dbo].[Admin_MasterCityCheckExists] 
(
	@CityId int
	,@CityName varchar(250)
)	
AS
BEGIN
	IF(@CityId = 0)
	BEGIN
		SELECT MC.[StateId]
		  ,MC.[CityName]
		  ,MS.[CountryId]
		  ,MC.[CityShortName]		  
		FROM [dbo].[MasterCity] MC
		JOIN dbo.MasterState MS ON MS.StateId = MC.StateId
		WHERE MC.CityName = @CityName
		
	END
	ELSE
	BEGIN
		SELECT MC.[StateId]
		  ,MC.[CityName]
		  ,MS.[CountryId]
		  ,MC.[CityShortName]		  
		FROM [dbo].[MasterCity] MC
		JOIN dbo.MasterState MS ON MS.StateId = MC.StateId
		WHERE MC.CityId NOT IN (@CityId)
		AND MC.CityName = @CityName		
	END
END
GO
PRINT N'Creating [dbo].[Admin_MasterCityGet]...';


GO
CREATE PROCEDURE [dbo].[Admin_MasterCityGet]
	
AS
BEGIN
	SELECT 
		MC.CityId
	   ,MC.[StateId]
      ,MC.[CityName]
      ,MS.[CountryId]
      ,MC.[CityShortName]	  
	  ,MC.IsDefault
	FROM [dbo].[MasterCity] MC
	JOIN dbo.MasterState MS ON MS.StateId = MC.StateId
	JOIN dob.MasterCountry MAC ON MAC.CountryId = MS.CountryId
	WHERE MAC.IsDefault = 1
	AND MS.IsDefault = 1
END
GO
PRINT N'Creating [dbo].[Admin_MasterCityUpdate]...';


GO
Create PROCEDURE [dbo].[Admin_MasterCityUpdate] 
(
	@CityId int
	,@CityName varchar(250)
    ,@StateId int
    ,@CityShortName varchar(50)
	,@IsDefault Bit
)	
AS
BEGIN
	IF((SELECT 1 FROM MasterCity WHERE CityId = @CityId) = 1)
	BEGIN	

		UPDATE [dbo].[MasterCity]
		   SET [CityName] = @CityName
			  ,[StateId] = @StateId
			  ,[CityShortName] = @CityShortName
			  ,[IsDefault] = @IsDefault
		 WHERE StateId = @StateId

		 
	END
	ELSE
	BEGIN

		INSERT INTO [dbo].[MasterCity]
			   ([CityId]
			   ,[CityName]
			   ,[StateId]
			   ,[CityShortName]
			   ,[IsDefault])
		 VALUES
			   ((SELECT ISNULL(MAX(CityId),0) + 1 FROM MasterCity)
			   ,@CityName
			   ,@StateId
			   ,@CityShortName
			   ,@IsDefault)

	END

	IF(@IsDefault = 1)
	BEGIN
		UPDATE [dbo].[MasterState]
			SET [IsDefault] = 0
		WHERE StateId NOT IN (@StateId)
	END

END
GO
PRINT N'Creating [dbo].[Admin_MasterCityGetOnStateId]...';


GO
CREATE PROCEDURE [dbo].[Admin_MasterCityGetOnStateId]
(
	@StateId INT
)	
AS
BEGIN
	SELECT 
		MC.CityId
	   ,MC.[StateId]
      ,MC.[CityName]
      ,MS.[CountryId]
      ,MC.[CityShortName]	  
	  ,MC.IsDefault
	FROM [dbo].[MasterCity] MC
	JOIN dbo.MasterState MS ON MS.StateId = MC.StateId
	JOIN dbo.MasterCountry MAC ON MAC.CountryId = MS.CountryId
	WHERE MS.StateId = @StateId
END
GO
PRINT N'Creating [dbo].[Admin_MasterCityGetOnCityId]...';


GO
CREATE PROCEDURE [dbo].[Admin_MasterCityGetOnCityId] 
(
	@CityId INT
)	
AS
BEGIN
	SELECT 
		MC.CityId
	   ,MC.[StateId]
      ,MC.[CityName]
      ,MS.[CountryId]
      ,MC.[CityShortName]	  
	  ,MC.IsDefault
	FROM [dbo].[MasterCity] MC
	JOIN dbo.MasterState MS ON MS.StateId = MC.StateId
	JOIN dbo.MasterCountry MAC ON MAC.CountryId = MS.CountryId
	WHERE MC.CityId = @CityId
END
GO
PRINT N'Creating [dbo].[Admin_MasterCategoryUpdate]...';


GO
CREATE PROCEDURE [dbo].[Admin_MasterCategoryUpdate] 
(
	@CategoryId int
	,@CategoryName varchar(250)    
)	
AS
BEGIN
	IF((SELECT 1 FROM MasterCity WHERE CityId = @CategoryId) = 1)
	BEGIN	

		UPDATE [dbo].[MasterCategory]
		   SET CategoryName = @CategoryName
		 WHERE CategoryId = @CategoryId

		 
	END
	ELSE
	BEGIN

		INSERT INTO [dbo].[MasterCategory]
			   (CategoryId
			   ,CategoryName
			   )
		 VALUES
			   ((SELECT ISNULL(MAX(CategoryId),0) + 1 FROM MasterCategory)
			   ,@CategoryName
			   )

	END

	

END
GO
PRINT N'Creating [dbo].[Admin_MasterCategoryOnCategoryId]...';


GO
CREATE PROCEDURE [dbo].[Admin_MasterCategoryOnCategoryId]
(
	@CategoryId int
)	
AS
BEGIN
	SELECT 
		CategoryId
		,CategoryName
	FROM [dbo].[MasterCategory] MC	
	WHERE MC.CategoryId = @CategoryId
END
GO
PRINT N'Creating [dbo].[Admin_MasterCategoryGet]...';


GO
CREATE PROCEDURE [dbo].[Admin_MasterCategoryGet]
	
AS
BEGIN
	SELECT 
		CategoryId
		,CategoryName
	FROM [dbo].[MasterCategory] MC	
END
GO
PRINT N'Creating [dbo].[Admin_MasterCategoryCheckExists]...';


GO
CREATE PROCEDURE [dbo].[Admin_MasterCategoryCheckExists] 
(
	@CategoryId int
	,@CategoryName varchar(250)   
)	
AS
BEGIN
	IF(@CategoryId = 0)
	BEGIN
		SELECT MC.CategoryId
		  ,MC.CategoryName		  
		FROM [dbo].[MasterCategory] MC		
		WHERE MC.CategoryName = @CategoryName
		
	END
	ELSE
	BEGIN
		SELECT MC.CategoryId
		  ,MC.CategoryName		  	  
		FROM [dbo].[MasterCategory] MC		
		WHERE MC.CategoryId NOT IN (@CategoryId)
		AND MC.CategoryName = @CategoryName		
	END
END
GO
PRINT N'Creating [dbo].[AttractionsCheckExists]...';


GO
CREATE PROCEDURE [dbo].[AttractionsCheckExists] 
(
	@AttractionsId INT
	,@CityId int
	,@AttractionName varchar(250)
)	
AS
BEGIN
	IF(@CityId = 0)
	BEGIN
		SELECT [AttractionsId]
			  ,[AttractionName]
			  ,[AddressOne]
			  ,[AddressTwo]
			  ,[CityId]
			  ,[CategoryId]
			  ,[Longitude]
			  ,[Latitude]
			  ,[PlaceId]
			  ,[RankId]
			  ,[CreatedDate]
			  ,[CreatedBy]
			  ,[ModifiedDate]
			  ,[ModifiedBy]
			  ,[GoogleSearchText]
			  ,[GoogleWebSite]
			  ,[GoogleICon]
			  ,[GoogleInternational_phone_number]
			  ,[Googleadr_address]
			  ,[GoogleName]
			  ,[GoogleRating]
			  ,[GoogleUser_ratings_total]
		  FROM [dbo].[Attractions]		
		WHERE AttractionName = @AttractionName
		
	END
	ELSE
	BEGIN
		SELECT [AttractionsId]
			  ,[AttractionName]
			  ,[AddressOne]
			  ,[AddressTwo]
			  ,[CityId]
			  ,[CategoryId]
			  ,[Longitude]
			  ,[Latitude]
			  ,[PlaceId]
			  ,[RankId]
			  ,[CreatedDate]
			  ,[CreatedBy]
			  ,[ModifiedDate]
			  ,[ModifiedBy]
			  ,[GoogleSearchText]
			  ,[GoogleWebSite]
			  ,[GoogleICon]
			  ,[GoogleInternational_phone_number]
			  ,[Googleadr_address]
			  ,[GoogleName]
			  ,[GoogleRating]
			  ,[GoogleUser_ratings_total]
		  FROM [dbo].[Attractions]		
		WHERE AttractionName = @AttractionName
		AND AttractionsId NOT IN (@AttractionsId)		
	END
END
GO
PRINT N'Creating [dbo].[AttractionsOnCityId]...';


GO
CREATE PROCEDURE [dbo].[AttractionsOnCityId] 
(
	@CityId INT
)	
AS
BEGIN	

	SELECT [AttractionsId]
		  ,[AttractionName]
		  ,[AddressOne]
		  ,[AddressTwo]
		  ,[CityId]
		  ,[CategoryId]
		  ,[Longitude]
		  ,[Latitude]
		  ,[PlaceId]
		  ,[RankId]
		  ,[CreatedDate]
		  ,[CreatedBy]
		  ,[ModifiedDate]
		  ,[ModifiedBy]
		  ,[GoogleSearchText]
		  ,[GoogleWebSite]
		  ,[GoogleICon]
		  ,[GoogleInternational_phone_number]
		  ,[Googleadr_address]
		  ,[GoogleName]
		  ,[GoogleRating]
		  ,[GoogleUser_ratings_total]
	  FROM [dbo].[Attractions]
		WHERE CityId = @CityId
END
GO
PRINT N'Creating [dbo].[AttractionsOnAttractionsId]...';


GO
CREATE PROCEDURE [dbo].[AttractionsOnAttractionsId] 
(
	@AttractionsId INT
)	
AS
BEGIN	

	SELECT [AttractionsId]
		  ,[AttractionName]
		  ,[AddressOne]
		  ,[AddressTwo]
		  ,[CityId]
		  ,[CategoryId]
		  ,[Longitude]
		  ,[Latitude]
		  ,[PlaceId]
		  ,[RankId]
		  ,[CreatedDate]
		  ,[CreatedBy]
		  ,[ModifiedDate]
		  ,[ModifiedBy]
		  ,[GoogleSearchText]
		  ,[GoogleWebSite]
		  ,[GoogleICon]
		  ,[GoogleInternational_phone_number]
		  ,[Googleadr_address]
		  ,[GoogleName]
		  ,[GoogleRating]
		  ,[GoogleUser_ratings_total]
	  FROM [dbo].[Attractions]
		WHERE AttractionsId = @AttractionsId
END
GO
PRINT N'Creating [dbo].[AttractionsUpdate]...';


GO
Create PROCEDURE [dbo].[AttractionsUpdate] 
(
	@AttractionsId INT
	,@AttractionName varchar(500)
	,@AddressOne varchar(500)
	,@AddressTwo varchar(500)
	,@CityId int
	,@CategoryId int
	,@Longitude varchar(250)
	,@Latitude varchar(250)
	,@PlaceId varchar(250)
	,@RankId int
	,@CreatedBy varchar(250)	
	,@GoogleSearchText varchar(500)
	,@GoogleWebSite varchar(500)
	,@GoogleICon varchar(500)
	,@GoogleInternational_phone_number varchar(500)
	,@Googleadr_address varchar(2000)
	,@GoogleName varchar(500)
	,@GoogleRating varchar(50)
	,@GoogleUser_ratings_total int
)	
AS
BEGIN
	IF((SELECT 1 FROM Attractions WHERE AttractionsId = @AttractionsId) = 1)
	BEGIN			

		UPDATE [dbo].[Attractions]
		   SET [AttractionName] = @AttractionName
			  ,[AddressOne] = @AddressOne
			  ,[AddressTwo] = @AddressTwo
			  ,[CityId] = @CityId
			  ,[CategoryId] = @CategoryId
			  ,[Longitude] = @Longitude
			  ,[Latitude] = @Latitude
			  ,[PlaceId] = @PlaceId
			  ,[RankId] = @RankId			  
			  ,[ModifiedDate] = getdate()
			  ,[ModifiedBy] = @CreatedBy
			  ,[GoogleSearchText] = @GoogleSearchText
			  ,[GoogleWebSite] = @GoogleWebSite
			  ,[GoogleICon] = @GoogleICon
			  ,[GoogleInternational_phone_number] = @GoogleInternational_phone_number
			  ,[Googleadr_address] = @Googleadr_address
			  ,[GoogleName] = @GoogleName
			  ,[GoogleRating] = @GoogleRating
			  ,[GoogleUser_ratings_total] = @GoogleUser_ratings_total
		 WHERE AttractionsId = @AttractionsId




		 
	END
	ELSE
	BEGIN

		

		INSERT INTO [dbo].[Attractions]
				   ([AttractionName]
				   ,[AddressOne]
				   ,[AddressTwo]
				   ,[CityId]
				   ,[CategoryId]
				   ,[Longitude]
				   ,[Latitude]
				   ,[PlaceId]
				   ,[RankId]
				   ,[CreatedDate]
				   ,[CreatedBy]				   
				   ,[GoogleSearchText]
				   ,[GoogleWebSite]
				   ,[GoogleICon]
				   ,[GoogleInternational_phone_number]
				   ,[Googleadr_address]
				   ,[GoogleName]
				   ,[GoogleRating]
				   ,[GoogleUser_ratings_total])
			 VALUES
				   (@AttractionName
				   ,@AddressOne
				   ,@AddressTwo
				   ,@CityId
				   ,@CategoryId
				   ,@Longitude
				   ,@Latitude
				   ,@PlaceId
				   ,@RankId
				   ,getdate()
				   ,@CreatedBy				   
				   ,@GoogleSearchText
				   ,@GoogleWebSite
				   ,@GoogleICon
				   ,@GoogleInternational_phone_number
				   ,@Googleadr_address 
				   ,@GoogleName
				   ,@GoogleRating
				   ,@GoogleUser_ratings_total)
	END	

END
GO
PRINT N'Creating [dbo].[GetOrderOfAttractionVisit]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetOrderOfAttractionVisit]	
	@AttractionID userTable_OnlyId ReadOnly 
	,@TravelModeId INT
	,@SourceAttractionID INT
	,@DestinationAttractionID INT
	,@StartDate DATETIME = NULL
	,@StartTime TIME = NULL
AS
BEGIN

DECLARE @StartDateAndTime DATETIME = CAST(CAST(ISNULL(@StartDate,GetDATE()+1) AS DATE) AS DATETIME) + CAST(CAST(ISNULL(@StartTime,'9:00 AM') AS TIME) AS DATETIME)	

DECLARE	@SourceAttractions userTable_OnlyId 
DECLARE	@DestinationAttractions userTable_OnlyId 

INSERT INTO @SourceAttractions
SELECT * FROM @AttractionID

INSERT INTO @DestinationAttractions
SELECT * FROM @AttractionID


DECLARE @OrderAttraction AS userTable_OrderAttraction

DECLARE @OrderAttractionTemp AS userTable_OrderAttraction

DECLARE @MissingAttractions AS userTable_OrderAttraction


DECLARE @NextAttractionID INT = 0

DECLARE @Counter INT = (SELECT Count(*) FROM @AttractionID) 
DECLARE @LastSource INT = 0


WHILE @Counter > 0
BEGIN

	--if((SELECT count(*) FROM @OrderAttraction)>0)
	--BEGIN
	--	SET @SourceAttractionID = (SELECT TOP 1 DestinationAttractionId  FROM @OrderAttraction ORDER BY 1 DESC)
	--END
	--SELECT * FROM @OrderAttraction
	--SELECT @SourceAttractionID, (SELECT TOP 1 DestinationAttractionId  FROM @OrderAttraction ORDER BY 1 DESC)

	--Getting next nearest attraction ID
	--INSERT INTO @OrderAttraction(			
	--		[SourceAttractionId],
	--		[DestinationAttractionId],
	--		[Distance],
	--		[TravelTime],
	--		[TravelModeId],
	--		[SourceAttractionName],
	--		[DestinationAttractionName],
	--		[DateAndTime],
	--		[ReachTime],
	--		[TimeRequiredToView]
	--		,[ViewTime])
	--EXECUTE GetNextNearestLocation
	--@TravelModeId  = @TravelModeId
	--,@SourceAttractionID = @SourceAttractionID
	--,@DestinationAttractionID = @DestinationAttractionID
	--,@DestinationAttractions = @DestinationAttractions
	--,@OrderAttraction = @OrderAttraction
	--,@StartDateAndTime = @StartDateAndTime

	--SELECT TOP 1 @NextAttractionID = DestinationAttractionId
	--FROM @OrderAttractionTemp


	--DELETE FROM @OrderAttractionTemp
		
		
	
	--if(@SourceAttractionID > 0)
	--BEGIN
		--IF(	@NextAttractionID = @SourceAttractionID OR @NextAttractionID = 0)
		--BEGIN		
			
			
		--	INSERT INTO @OrderAttraction(			
		--	[SourceAttractionId],
		--	[DestinationAttractionId],
		--	[Distance],
		--	[TravelTime],
		--	[TravelModeId],
		--	[SourceAttractionName],
		--	[DestinationAttractionName],
		--	[DateAndTime],
		--	[ReachTime],
		--	[TimeRequiredToView]
		--	,[ViewTime])
		--	SELECT 
		--		CASE WHEN @NextAttractionID = 0 THEN @SourceAttractionID ELSE @NextAttractionID END
		--		,0
		--		,0
		--		,0
		--		,0
		--		,''
		--		,''
		--		,NULL
		--		,NULL
		--		,NULL
		--		,NULL
			
		--	DELETE FROM @SourceAttractions WHERE ID = CASE WHEN @NextAttractionID = 0 THEN @SourceAttractionID ELSE @NextAttractionID END
		--	--SET @SourceAttractionID = 
		--	--			(CASE WHEN (SELECT Count(*) FROM @SourceAttractions) = 1 
		--	--			THEN
		--	--				(SELECT TOP 1 ID FROM @SourceAttractions ORDER BY ID)			
		--	--			ELSE
		--	--				(SELECT TOP 1 ID FROM @SourceAttractions WHERE ID <> @DestinationAttractionID ORDER BY ID)			
		--	--			END)
			
		--	SET @NextAttractionID = @SourceAttractionID

			

		--END
		--ELSE
		--BEGIN

			--Checking is there any records are existed or not
			INSERT INTO @OrderAttractionTemp(			
			[SourceAttractionId],
			[DestinationAttractionId],
			[Distance],
			[TravelTime],
			[TravelModeId],
			[SourceAttractionName],
			[DestinationAttractionName],
			[DateAndTime],
			[ReachTime],
			[TimeRequiredToView]
			,[ViewTime])
			EXECUTE GetNextNearestLocation
			@TravelModeId  = @TravelModeId
			,@SourceAttractionID = @SourceAttractionID
			,@DestinationAttractionID = @DestinationAttractionID
			,@DestinationAttractions = @DestinationAttractions
			,@OrderAttraction = @OrderAttraction
			,@StartDateAndTime = @StartDateAndTime


			IF((SELECT COUNT(1) FROM @OrderAttractionTemp) = 0)
			BEGIN

				--Adding Missing Distance records
				EXEC [Admin_AddMissingDistanceRecords]
				@SourceAttractionID  = @SourceAttractionID,
				@DestinationAttractions =  @DestinationAttractions,
				@TravelModeId = @TravelModeId


				INSERT INTO @MissingAttractions(
				[SourceAttractionId],
				[DestinationAttractionId],
				[Distance]
				)
				VALUES
				(
					@SourceAttractionID,
					0,
					0
				)


				SELECT TOP 1 @SourceAttractionID = ID FROM  @SourceAttractions 
				WHERE ID NOT IN (@SourceAttractionID)
			END
			ELSE
			BEGIN
				INSERT INTO @OrderAttraction(			
				[SourceAttractionId],
				[DestinationAttractionId],
				[Distance],
				[TravelTime],
				[TravelModeId],
				[SourceAttractionName],
				[DestinationAttractionName],
				[DateAndTime],
				[ReachTime],
				[TimeRequiredToView]
				,[ViewTime])			
				EXECUTE GetNextNearestLocation
				@TravelModeId  = @TravelModeId
				,@SourceAttractionID = @SourceAttractionID
				,@DestinationAttractionID = @DestinationAttractionID
				,@DestinationAttractions = @DestinationAttractions
				,@OrderAttraction = @OrderAttraction
				,@StartDateAndTime = @StartDateAndTime

				SELECT TOP 1 @StartDateAndTime = ViewTime,
					@SourceAttractionID = DestinationAttractionId
				FROM @OrderAttraction
				Order by  ViewTime DESC
			END

			DELETE FROM @OrderAttractionTemp
			
			
			
			

			--DELETE FROM @OrderAttractionTemp

			DELETE FROM @DestinationAttractions WHERE ID IN  (SELECT DestinationAttractionId FROM @OrderAttraction)
			DELETE FROM @SourceAttractions WHERE ID IN  (SELECT SourceAttractionId FROM @OrderAttraction)
			--removing the missing attraction from the source also
			DELETE FROM @SourceAttractions WHERE ID IN  (SELECT SourceAttractionId FROM @MissingAttractions)

			--SET @SourceAttractionID = @NextAttractionID
			
			
		--END	

	--END

	

	SET @Counter = @Counter -1
END



--IF(@DestinationAttractionID > 0)
--BEGIN	

--	--SELECT  @DestinationAttractionID
--	--Missing Destination adding to the order
--	IF((SELECT count(1) FROM @OrderAttraction WHERE SourceAttractionID = @DestinationAttractionID) = 1)
--	BEGIN
--		DELETE FROM @OrderAttraction WHERE SourceAttractionID = @DestinationAttractionID
		
--		SELECT TOP 1 @LastSource = SourceAttractionId FROM @OrderAttraction 
--		WHERE OrderNumber = (SELECT Count(*) FROM @OrderAttraction )

--		IF(@LastSource>0)
--		BEGIN
--			DELETE FROM @OrderAttraction 
--			WHERE OrderNumber = (SELECT Count(*) FROM @OrderAttraction )

--			INSERT INTO @OrderAttraction(			
--			[SourceAttractionId],
--			[DestinationAttractionId],
--			[Distance],
--			[TravelTime],
--			[TravelModeId],
--			[SourceAttractionName],
--			[DestinationAttractionName])
--			SELECT 
--				S.SourceAttractionId
--				,S.DestinationAttractionId
--				,S.Distance
--				,S.TravelTime
--				,S.TravelModeId
--				,ATS.AttractionName AS 'SourceAttractionName'
--				,ATD.AttractionName As 'DestinationAttractionName'
--			FROM 
--			(
--				select *,
--				row_number() over (PARTITION BY SourceAttractionId order by Distance asc )RN
--				from AttractionTravelTimeDistance 
--				WHERE TravelModeId = @TravelModeId
--				AND SourceAttractionId = @LastSource
--				AND DestinationAttractionId  = @DestinationAttractionID				
--			)S
--			JOIN Attractions ATS ON ATS.AttractionsId = S.SourceAttractionId
--			JOIN Attractions ATD ON ATD.AttractionsId = S.DestinationAttractionId
--			WHERE RN =1 
--		END
--	END
--END
--ELSE
--BEGIN			
--	SELECT TOP 1 @LastSource = SourceAttractionId FROM @OrderAttraction 
--	WHERE OrderNumber = (SELECT Count(*) FROM @OrderAttraction )
--	IF(@LastSource>0)
--	BEGIN
--		DELETE FROM @OrderAttraction 
--		WHERE OrderNumber = (SELECT Count(*) FROM @OrderAttraction )
--	END
--END
--SELECT * FROM @DestinationAttractions 
--SELECT *  FROM @SourceAttractions   
SELECT	OA.*
		,MT.TravelType 
		,A.GoogleICon 'SourceIcon'
		,AD.GoogleICon 'DestinationIcon'
FROM @OrderAttraction OA
JOIN MasterTravelMode MT ON MT.TravelModeId = OA.TravelModeId
JOIN Attractions A ON A.AttractionsId = OA.SourceAttractionId
JOIN Attractions AD ON AD.AttractionsId = OA.DestinationAttractionId

UNION ALL

SELECT *
		,''
		,''
		,''
FROM @MissingAttractions

END
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
